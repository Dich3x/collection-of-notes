// ЦИКЛЫ JAVASCRIPT



// ЦИКЛ WHILE

// Синтаксис
while (condition) {
    // тело цикла
}
// while создаёт цикл, который выполняется пока условие condition является true

// Пример
let i = 0;
while (i < 3) { // пока i < 3 цикл будет работать
    console.log(i); // 0, 1, 2
    i++; // увеличивает i на одну еденищу
}
// каждое выполнение цикла называется итерация, в данном примере цикл совершает 3 итерации

// Условие может быть не только переменной, но и выражением
let i = 3;
while (i) { 
    console.log(i); // 3, 2, 1
    i--;
} 
// когда i будет равно 0, условие станет false и цикл прекратиться

// Цикл в одну строку
let i = 3;
while (i) console.log(i--);
// цикл в одну строку не требует фигурных скобок



// ЦИКЛ DO...WHILE

// Синтаксис
do {
    // тело цикла
} while (condition)
// do...while создаёт цикл, в котором сначало выполняется цикл а после проверяет является ли condition

// Пример
let i = 0;
do { // сначало выполняет код, а потом проверяет условие
    console.log(i); // выводит 0, затем 1, затем 2, затем 3
    i++; // увеличивает i на одну еденицу
} while (i < 3); // пока i < 3 цикл будет работать
// do...while нужен чтобы цикл выполнился один раз, даже если условие ложно



// ЦИКЛ FOR

// Синтаксис
for (start; condition; step) {
    // тело цикла
}
// for один раз выполняет start, после проверяет condition, если condition = true, то выполняется тело цикла, а после step
// start выполняется один раз при входе в цикл
// condition продолжает цикл если является true
// тело цикла отрабатывает после condition
// step выполняется после тела цикла

// Пример
for (let i = 0; i < 3; i++) { 
    console.log(i); // 0, 1, 2
}
// объявляется i, если i < 3, то сначало выполняется console.log(i), а после i++, и так пока i < 3 будет true

//Встроенное объявление переменной
for (let i = 0; i < 3; i++) {
    console.log(i);
}
console.loc(i); // error
// переменная которая объявленная внутри for будет существовать только внутри цика

let i = 0;

for (i = 0; i < 3; i++) {
    console.log(i);
}
console.log(i) // 3
// переменная объявленная снаружи будет доступна внутри и снаружи функции

// Пропуск частей for
let i = 0;
for (; i < 3; i++) {
    console.log(i); // 0, 1, 2
}
// пропуск start
for (let i = 0; i < 3;)
{
    console.log(i++); // 0, 1, 2
}
// пропуск step
for (let i = 0; ; i++) {
    console.log(i); // 0, 1, 2...
}
// пропуск condition
let i = 0;
for (;;) {
    console.log(i) // 0, 0, 0...
}
// пропуск всех частей for
// любая часть for может быть пропущена



// ПРЕРЫВАНИЕ ЦИКЛА: BREAK (Работает для всех циклов)
for (let i = 0; i < 3; i++ ) {
    if (i === 2) break;
    console.log(i); // 0, 1
}
// break заканчивает цикл если становится true



// ПЕРЕХОД К СЛЕДУЮЩЕЙ ИТЕРАЦИИ: CONTINUE
for (let i = 0; i < 3; i++) {
    if (i < 2) continue;
    console.log(i); // 2 
}
// continue заканчивает текущую итерацию



// НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ BREAK/CONTINUE С ОПЕРАТОРОМ ?
(i > 3) ? console.log(i) : continue; // eror



// МЕТКИ ДЛЯ BREAK/CONTINUE

// Без меток
for (let i = 0; i < 3; i++) {
    for (let i = 0; i < 3; i++) {
        console.log(i); // 0, 1, 0, 1, 0, 1
        if (i === 1) break;
    }
}
// без меток все циклы будут выполняться полностью

// C метками
outer: for (let i = 0; i < 3; i++) {
    for (let i = 0; i < 3; i++) {
        console.log(i); // 0, 1
        if (i === 1) break outer;
    }
} 
// с меткой outer отработал только один цикл, метки можно называть как угодно

// Метки не позволяют прыгать куда угодно
break label;
label: for(;;) {};
// метки могут отрабатывать только внутри цикла
